stages:
  - lint
  - test
  - build


lint:
  stage: lint
  image: golangci/golangci-lint:latest
  allow_failure: true
  parallel:
    matrix:
      - SERVICE: api_gateway_service
      - SERVICE: auth_service
      - SERVICE: quiz_service
      - SERVICE: stat_service
  script:
    - cd ${SERVICE} 
    - golangci-lint run

test:
  stage: test
  image: golang:1.24.2-alpine3.21
  allow_failure: true
  services:
    - name: redis:alpine
      alias: redis
  variables:
    REDIS_HOST: redis
  parallel:
    matrix:
      - SERVICE: auth_service
      - SERVICE: quiz_service
      - SERVICE: stat_service
  script:
    - cd ${SERVICE}
    - go test -v ./... -coverprofile=cover.out
    - go tool cover -func=cover.out | tee cover.txt
    - go tool cover -html=cover.out -o cover.html
    - cat cover.txt | grep total
  coverage: '/total:\s+\(statements\)\s+(\d+\.\d+)\%/'
  artifacts:
    when: always
    paths:
      - test_report.xml
    reports:
      junit: test_report.xml



# docker-build:
#   image: docker:cli
#   stage: build
#   services:
#     - docker:dind
#   parallel:
#     matrix:
#       - SERVICE: api_gateway_service
#       - SERVICE: frontend_with_nginx
#       - SERVICE: auth_service
#       - SERVICE: quiz_service
#       - SERVICE: stat_service
#   script:
#     - docker build



build:
  image: golang:1.24.2-alpine3.21
  stage: build
  script:
    - cd auth_service
    - go build -o bin/auth_service ./cmd/main.go
    - cd ..
    - cd quiz_service
    - go build -o bin/quiz_service ./cmd/quiz/main.go
    - cd ..
    - cd stat_service
    - go build -o bin/stat_service ./cmd/app/main.go
    - cd ..
