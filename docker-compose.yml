version: '3.8'

services:


  frontend:
    build: ./frontend
    ports:
      - "8080:80"

    depends_on:
      - auth_service
      - stat_service
      - quiz_service
    
    networks:
      - app_network


  stat_service: 
    container_name: stat_service
    environment:
      GRPC_PORT: 50051
    expose:
      - "50051"
    build:
      context: ./stat_service
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
    networks:
      - app_network
    depends_on:
      - stat_postgres

  stat_postgres:
    container_name: stat_postgres
    image: postgres:15
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 1234
      PGDATA: "/postgres_data"
    volumes:
       - stat_postgres:/postgres_data
    ports:
      - "5433:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped


  auth_service: 
    container_name: auth_service
    environment:
      GRPC_PORT: 50052
    expose:
      - "50052"        
      
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    ports:
      - "50052:50052"
    networks:
      - app_network
    depends_on:
      - auth_postgres

  auth_postgres:
    container_name: auth_postgres
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 05042007PULlup!
      POSTGRES_DB: postgres
    volumes:
       - auth_postgres:/postgres_data
    networks:
      - app_network
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  quiz_service:
    build: ./quiz_service
    expose:
      - "50053"              # gRPC порт
    depends_on:
      - quiz_postgres

  quiz_postgres:
    container_name: quiz_postgres
    image: postgres:15
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 1234
      PGDATA: "/postgres_data"
    volumes:
       - quiz_postgres:/postgres_data
    networks:
      - app_network
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped


volumes:
  stat_postgres:
  auth_postgres:
  quiz_postgres:


networks:
  app_network:
    driver: bridge