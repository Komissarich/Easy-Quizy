// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: protos/quiz.proto

package quiz_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuizService_CreateQuiz_FullMethodName      = "/api.QuizService/CreateQuiz"
	QuizService_GetQuiz_FullMethodName         = "/api.QuizService/GetQuiz"
	QuizService_GetQuizByAuthor_FullMethodName = "/api.QuizService/GetQuizByAuthor"
	QuizService_ListAll_FullMethodName         = "/api.QuizService/ListAll"
)

// QuizServiceClient is the client API for QuizService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizServiceClient interface {
	CreateQuiz(ctx context.Context, in *CreateQuizRequest, opts ...grpc.CallOption) (*CreateQuizResponse, error)
	GetQuiz(ctx context.Context, in *GetQuizRequest, opts ...grpc.CallOption) (*GetQuizResponse, error)
	GetQuizByAuthor(ctx context.Context, in *GetQuizByAuthorRequest, opts ...grpc.CallOption) (*GetQuizByAuthorResponse, error)
	ListAll(ctx context.Context, in *ListAllRequest, opts ...grpc.CallOption) (*ListAllResponse, error)
}

type quizServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizServiceClient(cc grpc.ClientConnInterface) QuizServiceClient {
	return &quizServiceClient{cc}
}

func (c *quizServiceClient) CreateQuiz(ctx context.Context, in *CreateQuizRequest, opts ...grpc.CallOption) (*CreateQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQuizResponse)
	err := c.cc.Invoke(ctx, QuizService_CreateQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) GetQuiz(ctx context.Context, in *GetQuizRequest, opts ...grpc.CallOption) (*GetQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuizResponse)
	err := c.cc.Invoke(ctx, QuizService_GetQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) GetQuizByAuthor(ctx context.Context, in *GetQuizByAuthorRequest, opts ...grpc.CallOption) (*GetQuizByAuthorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuizByAuthorResponse)
	err := c.cc.Invoke(ctx, QuizService_GetQuizByAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) ListAll(ctx context.Context, in *ListAllRequest, opts ...grpc.CallOption) (*ListAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllResponse)
	err := c.cc.Invoke(ctx, QuizService_ListAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizServiceServer is the server API for QuizService service.
// All implementations must embed UnimplementedQuizServiceServer
// for forward compatibility.
type QuizServiceServer interface {
	CreateQuiz(context.Context, *CreateQuizRequest) (*CreateQuizResponse, error)
	GetQuiz(context.Context, *GetQuizRequest) (*GetQuizResponse, error)
	GetQuizByAuthor(context.Context, *GetQuizByAuthorRequest) (*GetQuizByAuthorResponse, error)
	ListAll(context.Context, *ListAllRequest) (*ListAllResponse, error)
	mustEmbedUnimplementedQuizServiceServer()
}

// UnimplementedQuizServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuizServiceServer struct{}

func (UnimplementedQuizServiceServer) CreateQuiz(context.Context, *CreateQuizRequest) (*CreateQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuiz not implemented")
}
func (UnimplementedQuizServiceServer) GetQuiz(context.Context, *GetQuizRequest) (*GetQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuiz not implemented")
}
func (UnimplementedQuizServiceServer) GetQuizByAuthor(context.Context, *GetQuizByAuthorRequest) (*GetQuizByAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuizByAuthor not implemented")
}
func (UnimplementedQuizServiceServer) ListAll(context.Context, *ListAllRequest) (*ListAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAll not implemented")
}
func (UnimplementedQuizServiceServer) mustEmbedUnimplementedQuizServiceServer() {}
func (UnimplementedQuizServiceServer) testEmbeddedByValue()                     {}

// UnsafeQuizServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizServiceServer will
// result in compilation errors.
type UnsafeQuizServiceServer interface {
	mustEmbedUnimplementedQuizServiceServer()
}

func RegisterQuizServiceServer(s grpc.ServiceRegistrar, srv QuizServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuizServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuizService_ServiceDesc, srv)
}

func _QuizService_CreateQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).CreateQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizService_CreateQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).CreateQuiz(ctx, req.(*CreateQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_GetQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).GetQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizService_GetQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).GetQuiz(ctx, req.(*GetQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_GetQuizByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuizByAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).GetQuizByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizService_GetQuizByAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).GetQuizByAuthor(ctx, req.(*GetQuizByAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizService_ListAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).ListAll(ctx, req.(*ListAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuizService_ServiceDesc is the grpc.ServiceDesc for QuizService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuizService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.QuizService",
	HandlerType: (*QuizServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuiz",
			Handler:    _QuizService_CreateQuiz_Handler,
		},
		{
			MethodName: "GetQuiz",
			Handler:    _QuizService_GetQuiz_Handler,
		},
		{
			MethodName: "GetQuizByAuthor",
			Handler:    _QuizService_GetQuizByAuthor_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _QuizService_ListAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/quiz.proto",
}
