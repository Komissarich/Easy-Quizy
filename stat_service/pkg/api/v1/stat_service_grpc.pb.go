// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/statistics/stat_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Statistics_UpdateStats_FullMethodName   = "/api.Statistics/UpdateStats"
	Statistics_GetQuizStat_FullMethodName   = "/api.Statistics/GetQuizStat"
	Statistics_ListQuizzes_FullMethodName   = "/api.Statistics/ListQuizzes"
	Statistics_GetPlayerStat_FullMethodName = "/api.Statistics/GetPlayerStat"
	Statistics_ListPlayers_FullMethodName   = "/api.Statistics/ListPlayers"
	Statistics_GetAuthorStat_FullMethodName = "/api.Statistics/GetAuthorStat"
	Statistics_ListAuthors_FullMethodName   = "/api.Statistics/ListAuthors"
)

// StatisticsClient is the client API for Statistics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatisticsClient interface {
	// Updating
	UpdateStats(ctx context.Context, in *UpdateStatsRequest, opts ...grpc.CallOption) (*UpdateStatsResponse, error)
	// Quizzes
	GetQuizStat(ctx context.Context, in *GetQuizStatRequest, opts ...grpc.CallOption) (*GetQuizStatResponse, error)
	ListQuizzes(ctx context.Context, in *ListQuizzesRequest, opts ...grpc.CallOption) (*ListQuizzesResponse, error)
	// Players
	GetPlayerStat(ctx context.Context, in *GetPlayerStatRequest, opts ...grpc.CallOption) (*GetPlayerStatResponse, error)
	ListPlayers(ctx context.Context, in *ListPlayersRequest, opts ...grpc.CallOption) (*ListPlayersResponse, error)
	// Authors
	GetAuthorStat(ctx context.Context, in *GetAuthorStatRequest, opts ...grpc.CallOption) (*GetAuthorStatResponse, error)
	ListAuthors(ctx context.Context, in *ListAuthorsRequest, opts ...grpc.CallOption) (*ListAuthorsResponse, error)
}

type statisticsClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticsClient(cc grpc.ClientConnInterface) StatisticsClient {
	return &statisticsClient{cc}
}

func (c *statisticsClient) UpdateStats(ctx context.Context, in *UpdateStatsRequest, opts ...grpc.CallOption) (*UpdateStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStatsResponse)
	err := c.cc.Invoke(ctx, Statistics_UpdateStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) GetQuizStat(ctx context.Context, in *GetQuizStatRequest, opts ...grpc.CallOption) (*GetQuizStatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuizStatResponse)
	err := c.cc.Invoke(ctx, Statistics_GetQuizStat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) ListQuizzes(ctx context.Context, in *ListQuizzesRequest, opts ...grpc.CallOption) (*ListQuizzesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuizzesResponse)
	err := c.cc.Invoke(ctx, Statistics_ListQuizzes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) GetPlayerStat(ctx context.Context, in *GetPlayerStatRequest, opts ...grpc.CallOption) (*GetPlayerStatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlayerStatResponse)
	err := c.cc.Invoke(ctx, Statistics_GetPlayerStat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) ListPlayers(ctx context.Context, in *ListPlayersRequest, opts ...grpc.CallOption) (*ListPlayersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPlayersResponse)
	err := c.cc.Invoke(ctx, Statistics_ListPlayers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) GetAuthorStat(ctx context.Context, in *GetAuthorStatRequest, opts ...grpc.CallOption) (*GetAuthorStatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuthorStatResponse)
	err := c.cc.Invoke(ctx, Statistics_GetAuthorStat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) ListAuthors(ctx context.Context, in *ListAuthorsRequest, opts ...grpc.CallOption) (*ListAuthorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAuthorsResponse)
	err := c.cc.Invoke(ctx, Statistics_ListAuthors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticsServer is the server API for Statistics service.
// All implementations must embed UnimplementedStatisticsServer
// for forward compatibility.
type StatisticsServer interface {
	// Updating
	UpdateStats(context.Context, *UpdateStatsRequest) (*UpdateStatsResponse, error)
	// Quizzes
	GetQuizStat(context.Context, *GetQuizStatRequest) (*GetQuizStatResponse, error)
	ListQuizzes(context.Context, *ListQuizzesRequest) (*ListQuizzesResponse, error)
	// Players
	GetPlayerStat(context.Context, *GetPlayerStatRequest) (*GetPlayerStatResponse, error)
	ListPlayers(context.Context, *ListPlayersRequest) (*ListPlayersResponse, error)
	// Authors
	GetAuthorStat(context.Context, *GetAuthorStatRequest) (*GetAuthorStatResponse, error)
	ListAuthors(context.Context, *ListAuthorsRequest) (*ListAuthorsResponse, error)
	mustEmbedUnimplementedStatisticsServer()
}

// UnimplementedStatisticsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatisticsServer struct{}

func (UnimplementedStatisticsServer) UpdateStats(context.Context, *UpdateStatsRequest) (*UpdateStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStats not implemented")
}
func (UnimplementedStatisticsServer) GetQuizStat(context.Context, *GetQuizStatRequest) (*GetQuizStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuizStat not implemented")
}
func (UnimplementedStatisticsServer) ListQuizzes(context.Context, *ListQuizzesRequest) (*ListQuizzesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuizzes not implemented")
}
func (UnimplementedStatisticsServer) GetPlayerStat(context.Context, *GetPlayerStatRequest) (*GetPlayerStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStat not implemented")
}
func (UnimplementedStatisticsServer) ListPlayers(context.Context, *ListPlayersRequest) (*ListPlayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlayers not implemented")
}
func (UnimplementedStatisticsServer) GetAuthorStat(context.Context, *GetAuthorStatRequest) (*GetAuthorStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorStat not implemented")
}
func (UnimplementedStatisticsServer) ListAuthors(context.Context, *ListAuthorsRequest) (*ListAuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthors not implemented")
}
func (UnimplementedStatisticsServer) mustEmbedUnimplementedStatisticsServer() {}
func (UnimplementedStatisticsServer) testEmbeddedByValue()                    {}

// UnsafeStatisticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticsServer will
// result in compilation errors.
type UnsafeStatisticsServer interface {
	mustEmbedUnimplementedStatisticsServer()
}

func RegisterStatisticsServer(s grpc.ServiceRegistrar, srv StatisticsServer) {
	// If the following call pancis, it indicates UnimplementedStatisticsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Statistics_ServiceDesc, srv)
}

func _Statistics_UpdateStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).UpdateStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Statistics_UpdateStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).UpdateStats(ctx, req.(*UpdateStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_GetQuizStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuizStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).GetQuizStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Statistics_GetQuizStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).GetQuizStat(ctx, req.(*GetQuizStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_ListQuizzes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuizzesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).ListQuizzes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Statistics_ListQuizzes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).ListQuizzes(ctx, req.(*ListQuizzesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_GetPlayerStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).GetPlayerStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Statistics_GetPlayerStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).GetPlayerStat(ctx, req.(*GetPlayerStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_ListPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).ListPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Statistics_ListPlayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).ListPlayers(ctx, req.(*ListPlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_GetAuthorStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).GetAuthorStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Statistics_GetAuthorStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).GetAuthorStat(ctx, req.(*GetAuthorStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_ListAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).ListAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Statistics_ListAuthors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).ListAuthors(ctx, req.(*ListAuthorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Statistics_ServiceDesc is the grpc.ServiceDesc for Statistics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Statistics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Statistics",
	HandlerType: (*StatisticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateStats",
			Handler:    _Statistics_UpdateStats_Handler,
		},
		{
			MethodName: "GetQuizStat",
			Handler:    _Statistics_GetQuizStat_Handler,
		},
		{
			MethodName: "ListQuizzes",
			Handler:    _Statistics_ListQuizzes_Handler,
		},
		{
			MethodName: "GetPlayerStat",
			Handler:    _Statistics_GetPlayerStat_Handler,
		},
		{
			MethodName: "ListPlayers",
			Handler:    _Statistics_ListPlayers_Handler,
		},
		{
			MethodName: "GetAuthorStat",
			Handler:    _Statistics_GetAuthorStat_Handler,
		},
		{
			MethodName: "ListAuthors",
			Handler:    _Statistics_ListAuthors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/statistics/stat_service.proto",
}
