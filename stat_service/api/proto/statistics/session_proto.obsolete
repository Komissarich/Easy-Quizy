syntax = "proto3";

option go_package = "pkg/api/v1";

package api;

import "api/google/api/annotations.proto";
import "api/proto/quizzes/quizzes.proto";
import "api/proto/users/users.proto";

// ----------------------------------------
// | Сервис для сбора и выдачи статистики |
// ----------------------------------------

service Statistics {
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse) {
    option (google.api.http) = {
      post: "/v1/stats/session"
      body: "*"
    };
  };
  rpc GetSession(GetSessionRequest) returns (GetSessionResponse) {
    option (google.api.http) = {
      get: "/v1/stats/session/{session_id}"
    };
  };
  rpc ListSessions(ListSessionsRequest) returns (ListSessionsResponse) {
    option (google.api.http) = {
      get: "/v1/stats"
    };
  };
  rpc GetQuizStat(GetQuizStatRequest) returns (GetQuizStatResponse) {
    option (google.api.http) = {
      get: "/v1/stats/quiz/{quiz_id}"
    };
  };

  rpc GetUserStat(GetUserStatRequest) returns (GetUserStatResponse) {
    option (google.api.http) = {
      get: "/v1/stats/user/{user_id}"
    };
  };

  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1/stats/users"
    };
  };

  // -----------------------
  // | Unimplemented rpc's |
  // -----------------------

  // rpc UpdateSession(UpdateSessionRequest) returns (UpdateSessionResponse) {
  //   option (google.api.http) = {
  //     patch: "/v1/stats/{id}"
  //     body: "*"
  //   };
  // };
  // rpc DeleteSession(DeleteSessionRequest) returns (DeleteSessionResponse) {
  //   option (google.api.http) = {
  //     delete: "/v1/stats/{id}"
  //   };
  // };
}


// ---------------------------------
// | Описание сессий и их методов |
// ---------------------------------

message Result {
  string user_id = 1;
  repeated string answers = 2;
}

message Session {
  // id сессии
  string session_id = 1; 
  // id проводимого квиза
  string quiz_id = 2;
  // кол-во игроков
  string start_time = 3;
  string end_time = 4;
  repeated Result results = 5;
}


message CreateSessionRequest {
  string quiz_id = 1;
  repeated Result results = 2;
  string start_time = 3;
  string end_time = 4;
}
message CreateSessionResponse {
  string session_id = 1;
}


message GetSessionRequest {
  string session_id = 1;
}
message GetSessionResponse {
  Session session = 1;
}


message ListSessionsRequest {}
message ListSessionsResponse {
  repeated Session sessions = 1;
}

// -----------------------------------------------------
// | Метод для получения статистики по отдельному квизу|
// -----------------------------------------------------

message GetQuizStatRequest {
  string quiz_id = 1;
} 
message GetQuizStatResponse {
  string name = 1;
  string author = 2;
  int32 num_of_sessions = 3;
  int32 max_score = 4;
  float avg_score = 5;
  repeated int32 top_questions = 6;
}

// ------------------------------------------------------------
// | Метод для получения статистики по отдельному пользователю|
// ------------------------------------------------------------

message GetUserStatRequest {
  string user_id = 1;
}
message GetUserStatResponse {
  string name = 1;
  int32 total_score = 2;
  int32 num_sessions = 3;
  float avg_score = 4;
  repeated Quiz authorship = 5;
}


message ListUsersRequest {
  string sort_by = 1;
}
message ListUsersResponse {
  repeated User users = 1;
}


// message UpdateSessionRequest {
//   
// }
// message UpdateSessionResponse {
//   Session session = 1;
// }


// message DeleteSessionRequest {
//   string id = 1;
// }
// message DeleteSessionResponse {
//   bool success = 1;
// }


